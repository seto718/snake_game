{"version":3,"sources":["utils/index.js","constants/index.js","conponents/Navigation.jsx","conponents/Field.jsx","conponents/Button.jsx","conponents/ManipulationPanel.jsx","hooks/useSnakeGame.js","App.js","reportWebVitals.js","index.js"],"names":["getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","getSnakePosition","initFields","snake","fields","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","OppositeDirection","Delta","DirectionKeyCodeMap","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","map","row","column","index","Button","status","onStart","onStop","onRestart","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","timer","undefined","unsubscribe","clearInterval","useSnakeGame","useState","setFields","body","setBody","setStatus","tick","setTick","direction","setDirection","setDifficulty","snakePosition","setSnakePosition","useEffect","setInterval","handleMoving","delta","newPosition","position","isCollision","isEatingMyself","newBody","removingTrack","pop","unshift","updateDirection","useCallback","newDirection","updateDifficulty","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","start","stop","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0cec2a1c.chunk.js","sourcesContent":["export const getFoodPosition = (fieldSize, excludes) => {\r\n  while(true){\r\n    const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\r\n    const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\r\n    const conflict = excludes.some((item) => item.x === x && item.y === y)\r\n    if(!conflict){\r\n      return {x,y};\r\n    }\r\n  }\r\n}\r\n\r\nexport const getSnakePosition = (fieldSize) => {\r\n  const snake_x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\r\n  const snake_y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\r\n  const initialPosition = {x:snake_x, y:snake_y}\r\n  return initialPosition\r\n}\r\n\r\nexport const initFields = (fieldSize, snake) => {\r\n    const fields = [];\r\n    \r\n\r\n    for(let i=0; i<fieldSize; i++){\r\n      const cols = new Array(fieldSize).fill('')\r\n      fields.push(cols)\r\n    }\r\n    fields[snake.y][snake.x] = 'snake'\r\n    const food = getFoodPosition(fieldSize, [snake])\r\n    fields[food.y][food.x] = 'food'\r\n    return fields\r\n}\r\n\r\n//壁にぶち当たったらfalseを返す関数\r\nexport const isCollision = (fieldSize,position) => {\r\n  if(position.y < 0 || position.x < 0){\r\n    return true;\r\n  }\r\n\r\n  if(position.y > fieldSize - 1 || position.x > fieldSize -1 ){\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isEatingMyself = (fields, position) => {\r\n  return fields[position.y][position.x] === 'snake'\r\n}","import {getSnakePosition,initFields} from '../utils';\r\n\r\nexport const fieldSize = 35\r\nexport const initialPosition = getSnakePosition(fieldSize)\r\nexport const initialValues = initFields(fieldSize, initialPosition)\r\nexport const defaultInterval = 100\r\nexport const defaultdifficulty = 3\r\nexport const Difficulty=[ 1000, 500, 100, 50, 10]\r\n\r\n\r\nexport const GameStatus = Object.freeze({\r\n  init: 'init',\r\n  playing: 'playing',\r\n  suspended: 'suspended',\r\n  gameover: 'gameover'\r\n})\r\n\r\nexport const Direction = Object.freeze({\r\n  up: 'up',\r\n  right: 'right',\r\n  left: 'left',\r\n  down: 'down'\r\n})\r\n\r\nexport const OppositeDirection = Object.freeze({\r\n  up: 'up',\r\n  right: 'right',\r\n  left: 'left',\r\n  down: 'down'\r\n})\r\n\r\nexport const Delta = Object.freeze({\r\n  up:{x: 0, y: -1},\r\n  right:{x: 1, y: 0},\r\n  left:{x: -1, y: 0},\r\n  down:{x: 0, y: 1}\r\n})\r\n\r\nexport const DirectionKeyCodeMap = Object.freeze({\r\n  37: Direction.left,\r\n  38: Direction.up,\r\n  39: Direction.right,\r\n  40: Direction.down\r\n})","import React from 'react';\r\nimport { defaultdifficulty,Difficulty } from '../constants';\r\n\r\nconst Navigation = ({ length, difficulty = defaultdifficulty, onChangeDifficulty }) => {\r\n    const upVisibility = difficulty < Difficulty.length ? '' : 'is-hidden'\r\n    const downVisibility = difficulty > 1 ? '' : 'is-hidden'\r\n    const onUpDifficulty = () => onChangeDifficulty(difficulty + 1)\r\n    const onDownDifficulty = () => onChangeDifficulty(difficulty - 1)\r\n\r\n    return (\r\n        <div className=\"navigation\">\r\n            <div className=\"navigation-item\">\r\n                <span className=\"navigation-label\">Length: </span>\r\n                <div className=\"navigation-item-number-container\">\r\n                    <div className=\"num-board\">{length}</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"navigation-item\">\r\n                <span className=\"navigation-label\">Difficulty: </span>\r\n                <div className=\"navigation-item-number-container\">\r\n                    <span className=\"num-board\">{difficulty}</span>\r\n                    <div className=\"difficulty-button-container\">\r\n                        <div className={`difficulty-button difficulty-up ${upVisibility}`}\r\n                            onClick={onUpDifficulty}\r\n                        ></div>\r\n                        <div className={`difficulty-button difficulty-down ${downVisibility}`}\r\n                            onClick={onDownDifficulty}\r\n                        ></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Navigation;","import React from \"react\";\r\n\r\nconst Field = ({fields}) => {\r\n    return(\r\n        <div className=\"field\">\r\n            {\r\n                fields.map((row) => {\r\n                    return row.map((column,index) => {\r\n                        return <div className={`dots ${column}`} key={index}></div>\r\n                    })\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Field;","import React from \"react\";\r\nimport { GameStatus } from \"../constants\";\r\n\r\nconst Button = ({ status, onStart, onStop, onRestart }) =>{\r\n    return (\r\n        <div className=\"button\">\r\n            {status === GameStatus.gameover &&<button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button>}\r\n            {status === GameStatus.playing && <button className=\"btn btn-playing\" onClick={onStop}>stop</button>}\r\n            {status === GameStatus.init && <button className=\"btn btn-init\" onClick={onStart}>start</button>}\r\n            {status === GameStatus.suspended && <button className=\"btn btn-suspended\" onClick={onStart}>start</button>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faArrowLeft,\r\n    faArrowUp,\r\n    faArrowDown,\r\n    faArrowRight\r\n}from '@fortawesome/free-solid-svg-icons';\r\nimport {Direction} from '../constants';\r\n\r\nconst ManipulationPanel = ({ onChange }) =>{\r\n    const onUp = () => onChange(Direction.up)\r\n    const onRight = () => onChange(Direction.right)\r\n    const onLeft = () => onChange(Direction.left)\r\n    const onDown = () => onChange(Direction.down)\r\n    \r\n\r\n    return (\r\n        <div className='manipulation-panel'>\r\n            <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\r\n                <FontAwesomeIcon icon={faArrowLeft} />\r\n            </button>\r\n            <div>\r\n                <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\r\n                    <FontAwesomeIcon icon={faArrowUp} />\r\n                </button>\r\n                <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\r\n                    <FontAwesomeIcon icon={faArrowDown} />\r\n                </button>\r\n            </div>\r\n            <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\r\n                <FontAwesomeIcon icon={faArrowRight} />\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ManipulationPanel;","import React, { useCallback, useEffect, useState} from 'react';\r\nimport {initFields, getFoodPosition,getSnakePosition,isCollision,isEatingMyself } from '../utils';\r\nimport {\r\n    initialPosition,\r\n    defaultInterval,\r\n    defaultdifficulty,\r\n    initialValues,\r\n    Difficulty,\r\n    GameStatus,\r\n    Direction,\r\n    OppositeDirection,\r\n    Delta,\r\n    DirectionKeyCodeMap\r\n} from '../constants';\r\n\r\n\r\n\r\nlet timer = undefined\r\n\r\n//タイマーが必要なくなったら削除するための関数\r\nconst unsubscribe = () => {\r\n    if(!timer) {\r\n        return\r\n    }\r\n    clearInterval(timer)\r\n}\r\n\r\nconst useSnakeGame = () => {\r\n\r\n    const [fields, setFields] = useState(initialValues)\r\n    const [body, setBody] = useState([])\r\n    const [status, setStatus] = useState(GameStatus.init)\r\n    const [tick, setTick] = useState(0)\r\n    const [direction, setDirection] = useState(Direction.up)\r\n    const [difficulty, setDifficulty] = useState(defaultdifficulty)\r\n    const [snakePosition, setSnakePosition] = useState(initialPosition)\r\n\r\n    const start = () => setStatus(GameStatus.playing)\r\n    const stop = () => setStatus(GameStatus.suspended)\r\n\r\n    const reload = () => {\r\n        timer = setInterval(() => {\r\n        setTick(tick => tick + 1)\r\n        }, defaultInterval)\r\n\r\n        setStatus(GameStatus.init)\r\n        const snakePosition = getSnakePosition(fields.length)\r\n        setSnakePosition(snakePosition)\r\n        setDirection(Direction.up)\r\n        setFields(initFields(fields.length,snakePosition))\r\n        setBody([snakePosition])\r\n        setDifficulty(defaultdifficulty)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(status === GameStatus.init){\r\n            setBody([snakePosition])\r\n        \r\n        //テスト用ヘビの初期の長さ調整\r\n        // setBody(\r\n        //   new Array(15).fill('').map((_item,index) => ({x:17,y:17 + index})),\r\n        // )\r\n        const interval = Difficulty[difficulty - 1]\r\n        timer = setInterval(() => {\r\n            setTick(tick => tick + 1)\r\n        }, interval)\r\n        return unsubscribe\r\n        }else if(status === GameStatus.suspended){\r\n\r\n        const interval = Difficulty[difficulty - 1]\r\n        timer = setInterval(() => {\r\n            setTick(tick => tick + 1)\r\n        }, interval)\r\n        return unsubscribe\r\n        }\r\n        \r\n    },[difficulty],status,snakePosition)\r\n\r\n    useEffect(() => {\r\n        if(!body.length === 0 || status !== GameStatus.playing){\r\n        return\r\n        }\r\n        const canContinue = handleMoving()\r\n\r\n        if (!canContinue){\r\n        unsubscribe()\r\n        setStatus(GameStatus.gameover)\r\n        }\r\n    },[tick])\r\n\r\n    //ヘビが進行する関数\r\n    const handleMoving = () => {\r\n        const {x, y} = body[0]\r\n        const delta = Delta[direction]\r\n        const newPosition = {\r\n        x: x+delta.x,\r\n        y: y+delta.y\r\n        }\r\n\r\n        if(isCollision(fields.length, newPosition) || isEatingMyself(fields, newPosition)){\r\n        unsubscribe()\r\n        return false\r\n        }\r\n        const newBody =[...body]\r\n        if(fields[newPosition.y][newPosition.x] !== 'food'){\r\n        const removingTrack = newBody.pop()\r\n        fields[removingTrack.y][removingTrack.x] = ''\r\n        } else{\r\n        const food = getFoodPosition(fields.length, [...newBody, newPosition])\r\n        fields[food.y][food.x] = 'food'\r\n        }\r\n        \r\n        fields[newPosition.y][newPosition.x] = 'snake'\r\n        newBody.unshift(newPosition)\r\n        setBody(newBody)\r\n\r\n        setFields(fields)\r\n        return true\r\n    }\r\n\r\n    //キー操作で方向転換\r\n    const updateDirection = useCallback((newDirection) =>{\r\n        if(status !== GameStatus.playing) {\r\n            return direction\r\n        }\r\n\r\n        // ここから自分実装\r\n        if((OppositeDirection[direction] === 'up' && newDirection === 'down')||(OppositeDirection[direction] === 'down' && newDirection === 'up')){\r\n            return direction\r\n        }else if((OppositeDirection[direction] === 'left' && newDirection === 'right')||(OppositeDirection[direction] === 'right' && newDirection === 'left')){\r\n            return direction\r\n        }\r\n        //\r\n\r\n\r\n        if(OppositeDirection[direction] === newDirection){\r\n            return\r\n        }\r\n        setDirection(newDirection)\r\n        },[direction,status]\r\n    )\r\n\r\n    const updateDifficulty = useCallback((difficulty) => {\r\n        \r\n        if(status === GameStatus.suspended){\r\n        if(difficulty < 1 || difficulty > difficulty.length){\r\n            return\r\n        }\r\n        setDifficulty(difficulty)\r\n        }\r\n\r\n        //なぜかここにsuspendedの場合も追加しようとしても通ってしまう\r\n        if(status !== GameStatus.init){\r\n        // console.log('aaa')\r\n        return\r\n        }\r\n        if(difficulty < 1 || difficulty > difficulty.length){\r\n        return\r\n        }\r\n        setDifficulty(difficulty)\r\n    },[status, difficulty])\r\n\r\n    useEffect(() => {\r\n        const handleKeyDown = (e) => {\r\n        const newDirection = DirectionKeyCodeMap[e.keyCode];\r\n        if(!newDirection){\r\n            return;\r\n        }\r\n        updateDirection(newDirection);\r\n        };\r\n        document.addEventListener('keydown',handleKeyDown);\r\n        return () => document.removeEventListener('keydown',handleKeyDown)\r\n    },[updateDirection])\r\n    \r\n    return {\r\n        body,\r\n        difficulty,\r\n        fields,\r\n        status,\r\n        start,\r\n        stop,\r\n        reload,\r\n        updateDirection,\r\n        updateDifficulty,\r\n    };\r\n}\r\n\r\nexport default useSnakeGame;","import React from 'react';\nimport Navigation from './conponents/Navigation';\nimport Field from './conponents/Field';\nimport Button from './conponents/Button';\nimport ManipulationPanel from './conponents/ManipulationPanel';\nimport useSnakeGame from './hooks/useSnakeGame';\n\n\nfunction App() {\n\n  const {\n    body,\n    difficulty,\n    fields,\n    start,\n    stop,\n    reload,\n    status,\n    updateDirection,\n    updateDifficulty,\n  } = useSnakeGame()\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n        length={body.length}\n        difficulty={difficulty}\n        onChangeDifficulty={updateDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStop={stop}\n          onStart={start}\n          onRestart={reload}\n         />\n        <ManipulationPanel onChange={updateDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}